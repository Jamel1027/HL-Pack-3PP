<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- This file contains the definitions of components associated with traits such as
      attributes, skills, special abilities, etc.
-->

<document signature="Hero Lab Structure">
  <loadonce key="COM_3PPPack_PathOfWar - Components"/>

  <!-- ==================================================  -->
  <component
    id="PWManuever"
    name="Path of War Manuevers"
    autocompset="no"
    hasshortname="no"
    ispublic="yes">

    <!-- Fields -->
    <field
      id="mPreReq"
      name="Prerequisites Manuevers"
      type="user"
      maxlength="0">
    </field>
    <field
      id="mDC"
      name="Manuever DC"
      type="derived"
      maxlength="0">
      <calculate phase="PostAttr" priority="10000"><![CDATA[
        ~ Calculate our DC as 10 plus Maneuver level plus the Attribute Score we are linked
        ~ to by the UseAttr.? tag on the configurable. We will also add in the "school of magic" 
        ~ DC bonus. We are using the schools in the same way as LW to give a single place to increase
        ~ all the DC's of a specific Discipline.
        @value = 10 + tagvalue[mLevel.?] + hero.findchild[BaseAttr,linkage[table].tagids[UseAttr.?]].field[aModBonus].value + hero.findchild[SplSchool,"PathOfWar.Discipline & " & tagids[Discipline.?]].field[schDC].value
        ]]></calculate>
    </field>
    <field
      id="mIL"
      name="Initiator Level"
      type="derived"
      maxlength="0">
      <calculate phase="PostLevel" priority="20"><![CDATA[
        ~ Get our current IL from the configurator that is setup
        ~ from the PoW class at PostLevel/10.
        @value = linkage[table].field[cfgLevel].value
        ]]></calculate>
    </field>
    <field
      id="mIM"
      name="Initiation Modifier"
      type="derived"
      maxlength="0">
      <calculate phase="PostAttr" priority="10000"><![CDATA[
        ~ Initiation Modifier is the same linked Attribute score we used to calculate save DC
        @value = hero.findchild[BaseAttr,linkage[table].tagids[UseAttr.?]].field[aModBonus].value
        ]]></calculate>
    </field>
    <field
      id="mRange"
      name="Range Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mTarget"
      name="Target Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mArea"
      name="Area Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mDuration"
      name="Duration Text"
      type="user"
      maxlength="100">
    </field>
    <field
      id="mSave"
      name="Save Text"
      type="user"
      maxlength="100">
    </field>

    <!-- TAGS -->
    <tag group="Usage" tag="PWEncounte"/>
    <tag group="SpecType" tag="Attack"/>

    <!-- This forwards HasMan.? tags to the hero. It also correctly increases the number of
         taken Manuevers on the Configurable.
    -->
    <eval index="1" phase="First" priority="10000"><![CDATA[
      ~ Correctly setup the manuever or stance
      Call PWsetupMan
      ]]>
    </eval>

    <!-- This makes sure that the number maneuvers required is valid. This pulls the mPreReq field
         of the manuever.
    -->
    <prereq message="maneuver(s) required.">
      <validate>
        ~ Validate the number of maneuvers needed. The number of maneuvers needed is stored in mPreReq
        var ValidManRQ as number
        var ValidManTx as string
        Call ValidManRQ
        @valid = ValidManRQ
        @message = ValidManTx
      </validate>
    </prereq>
    <!-- This checks after we become a pick that we have a high enough IL to have learned this
         maneuver. This can NOT be done why we are a Thing as we have no idea which class we 
         are currently attached to.
    -->
    <prereq message="You do not have a high enough Initiator Level to learn this maneuver.">
      <validate>
        var ValidManIL as number
        Call ValidManIL
        @valid = ValidManIL
      </validate>
    </prereq>

  </component>
  <!-- ************************************************************************ -->



  <!-- ==================================================  -->
  <!-- Comment out for now
  <component
    id="PWClsMan"
    name="Class, Manuevers"
    autocompset="no"
    hasshortname="no"
    ispublic="yes">
    <eval index="1" phase="First" priority="1"><![CDATA[
      ~ Setup the names on the selectors
      field[cfgObject1].text = "Maneuvers"
      field[cfgObject2].text = "Stances"
      
      ~ Assign tags that all configurables must have
      perform assign[PathOfWar.StanceUp]
      perform assign[PathOfWar.Config]
      ]]>
    </eval>
    <eval index="2" phase="Final" priority="11000"><![CDATA[
      ~ Setup the Warlord Maneuvers
      Call PWsetupCfg
      ]]>
    </eval>
    <prereq message="You have too many Manuevers Readied.">
      <validate>
        ~ This makes sure that the number maneuvers that has been readied is is valid.
        var ValidManOn as number
        Call ValidManOn
        @valid = ValidManOn
      </validate>
    </prereq>
    <prereq message="You have activated more stances than allowed.">
      <validate>
        ~ This makes sure that the number of stances activated is valid.
        var ValidStaOn as number
        Call ValidStaOn
        @valid = ValidStaOn
      </validate>
    </prereq>

  </component>
  -->
  <!-- ************************************************************************ -->



  <compset
    id="PWManuever">
    <compref component="PWManuever"/>
    <compref component="Value"/>
    <compref component="Ability"/>
    <compref component="Tracker"/>
    <compref component="Activated"/>
    <compref component="UserSelect"/>
    <compref component="SetName"/>
    <compref component="SpecialTab"/>
    <compref component="StatblName"/>
    <compref component="Custom"/>
  </compset>

  <!--
  <compset
    id="PWClsMan">
    <compref component="PWClsMan"/>
    <compref component="Value"/>
    <compref component="Configure"/>
    <compref component="Companion"/>
    <compref component="shortname"/>
  </compset>
  -->

  </document>
